import * as THREE from "three";
import { OrbitControls } from "three/addons/controls/OrbitControls.js";
import { emissive } from 'three/tsl';
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 3000);
camera.position.set(0, 0, 2000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const controls = new OrbitControls(camera, renderer.domElement);

//#region data helpers
function getHeight() {
    return 300;
}

function getWidth() {
    return 200;
}

function getExtrudeWidth_alongX() {
    return  1000;
}

function getExtrudeWidth_alongY() {
    return 500;
}
//#endregion

//#region shape helper
function getRectangleShape() {
    let width = getWidth(), height = getHeight();
    const shape = new THREE.Shape();
    shape.moveTo(0, 0);
    shape.lineTo(width, 0);
    shape.lineTo(width, height);
    shape.lineTo(0, height);
    shape.lineTo(0, 0);
    return shape;
}
//#endregion

//#region Line helper along which the shape will be extruded
function getLine() {
    let vertex1 = new THREE.Vector3(0, 0, 0);
    let vertex2 = new THREE.Vector3(getExtrudeWidth_alongX(), getExtrudeWidth_alongY(), 0);
    const line = new THREE.LineCurve3(vertex1, vertex2);
    return line;
}
//#endregion

//#region Edges helper for creating edges around the mesh
function createEdges(mesh) {
    const edges = new THREE.EdgesGeometry(mesh.geometry);
    const edgesMaterial = new THREE.LineBasicMaterial({ color: "white", side: THREE.DoubleSide });
    const edgesMesh = new THREE.LineSegments(edges, edgesMaterial);
    mesh.add(edgesMesh);
}
//#endregion

//#region Mesh helper for creating the mesh
function createMesh() {
    const line = getLine();
    const shape = getRectangleShape();

    const extrudeSettings = {
        depth: 10,
        bevelEnabled: false,
        extrudePath: line
    };

    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
    const material = new THREE.MeshBasicMaterial({ color: "red", side: THREE.DoubleSide });
    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    return mesh;
}
//#endregion

//#region main function
function task3() {

    let width = getWidth(), height = getHeight();

    //Getting the line along which the mesh is extruded
    const line = getLine();
    let rightVertex = line.v2, leftVertex = line.v1;

    //Getting the mesh which has to be cut
    const mesh = createMesh();

    //Creating the line perpendicular to the base of the shape
    const dir1 = new THREE.Vector3().subVectors(rightVertex, leftVertex).normalize();
    const zAxis = new THREE.Vector3(0, 0, -1);
    const perpDir = new THREE.Vector3().crossVectors(dir1, zAxis).normalize();
    const length = height * 2;
    const start = leftVertex.clone();
    const end = start.clone().add(perpDir.multiplyScalar(length));
    const leftCutLine = new THREE.LineCurve3(start, end);

    const lineGeometry = new THREE.BufferGeometry().setFromPoints(leftCutLine.getPoints(50));
    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff });
    const lineMesh = new THREE.Line(lineGeometry, lineMaterial);
    scene.add(lineMesh);

    //#region Shape Cutting Logic
    /*
    Step 1:- Check whether the x-axis or y-axis will be shifted, cutX checks whether x-axis is shifted and cutY checks whether y-axis is shifted
    Step 2:- Get the points along the line 
    If cutX is 1 then get the points corresonding to y coordinates else if cutY is 1 then get the points corresponding to x coordinates
    Step 3:- Then iterate over the geometry of the mesh and shift the coordinates 
    */
    let cutX = 0;
    let cutY = 0;
    let point1 = Math.abs(leftVertex.x - rightVertex.x);
    let point2 = Math.abs(leftVertex.y - rightVertex.y);
    if (point1 < point2) {
        cutY = 1;
    }
    else cutX = 1;

    let points;
    if (cutX) {
        points = leftCutLine.getPoints(Math.abs(end.y - start.y));
    }
    else {
        points = leftCutLine.getPoints(Math.abs(end.x - start.x));
    }


    const pointsArray = mesh.geometry.attributes.position;
    let maxi = Number.MAX_VALUE;
    let mini = Number.MAX_VALUE;

    for (let i = 0; i < pointsArray.count; i++) {
        let xCor = pointsArray.getX(i);
        let yCor = pointsArray.getY(i);
        let zCor = pointsArray.getZ(i);
        if (cutX) {
            if (xCor < mini) {
                mini = xCor;
            }
        }
        else {
            if (yCor < leftVertex.y + height && xCor < leftVertex.x) {
                pointsArray.setY(i, yCor + 200);
            }
        }
    }

    for (let i = 0; i < pointsArray.count; i++) {
        let xCor = pointsArray.getX(i);
        let yCor = pointsArray.getY(i);
        let zCor = pointsArray.getZ(i);
        if (xCor == mini && yCor > leftVertex.y) {
            pointsArray.setX(i, xCor + 200);
        }
    }
    //#endregion

    //Creating the edges around the mesh
    createEdges(mesh);

}
//#endregion

function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}
animate();

task3();
